import sys
from PyQt6.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, 
                           QPushButton, QLabel, QComboBox, QSpinBox, QLineEdit,
                           QTextEdit, QMessageBox, QHBoxLayout, QGridLayout, QFileDialog,
                           QDoubleSpinBox, QListWidget, QTabWidget, QGroupBox, QDialog)
from PyQt6.QtCore import Qt, QUrl, QTimer
from PyQt6.QtGui import QIcon, QFont, QPixmap
from PyQt6.QtWebEngineWidgets import QWebEngineView
import google.generativeai as genai
import requests
import os
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
import base64
from io import BytesIO
from PIL import Image
import time
import math
from PIL import ImageDraw
from deep_translator import GoogleTranslator
import openai
import hashlib
import datetime
import uuid

# Adicionar no início do arquivo, após as importações
STYLE_SHEET = """
QMainWindow, QWidget {
    background-color: #1E1E2E;
    color: white;
}

QPushButton {
    background-color: #2D2D3F;
    color: white;
    border: none;
    padding: 12px 20px;
    border-radius: 8px;
    font-size: 14px;
    font-weight: bold;
}

QPushButton:hover {
    background-color: #3D3D4F;
}

QPushButton.primary {
    background-color: #FFD700;
    color: #1E1E2E;
}

QPushButton.primary:hover {
    background-color: #FFE44D;
}

QLineEdit, QTextEdit, QComboBox, QSpinBox {
    background-color: #2D2D3F;
    color: white;
    border: 1px solid #3D3D4F;
    border-radius: 8px;
    padding: 8px;
    font-size: 14px;
}

QLabel {
    color: #FFD700;
    font-size: 14px;
    font-weight: bold;
}

QGroupBox {
    background-color: #2D2D3F;
    border: 1px solid #3D3D4F;
    border-radius: 10px;
    margin-top: 15px;
    padding: 15px;
    color: #FFD700;
}

QTabWidget::pane {
    border: 1px solid #3D3D4F;
    border-radius: 10px;
}

QTabBar::tab {
    background-color: #2D2D3F;
    color: white;
    padding: 10px 20px;
    margin: 2px;
    border-top-left-radius: 8px;
    border-top-right-radius: 8px;
}

QTabBar::tab:selected {
    background-color: #FFD700;
    color: #1E1E2E;
}

QScrollBar:vertical {
    background-color: #2D2D3F;
    width: 12px;
    border-radius: 6px;
}

QScrollBar::handle:vertical {
    background-color: #3D3D4F;
    border-radius: 6px;
}

QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {
    height: 0px;
}
"""

# Função para carregar dados do arquivo JSON
def load_data():
    try:
        with open('data.json', 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        return {"roteiros": 0, "midias": 0, "audios": 0}

# Função para salvar dados no arquivo JSON
def save_data(data):
    with open('data.json', 'w') as f:
        json.dump(data, f)

class WebViewWindow(QWidget):
    def __init__(self, url):
        super().__init__()
        self.setWindowTitle("PicLumen")
        self.setMinimumSize(800, 600)
        
        layout = QVBoxLayout()
        
        # Cria o componente de visualização da web
        self.web_view = QWebEngineView()
        self.web_view.setUrl(QUrl(url))
        
        layout.addWidget(self.web_view)
        
        # Botão para capturar a imagem
        capture_btn = QPushButton("Salvar Imagem")
        capture_btn.clicked.connect(self.extract_image)
        layout.addWidget(capture_btn)
        
        self.setLayout(layout)

    def extract_image(self):
        # JavaScript para extrair a imagem e convertê-la para base64
        js_code = """
        (function() {
            var img = document.querySelector('img[alt="Results generated by ai"]');
            if (img) {
                var canvas = document.createElement('canvas');
                var ctx = canvas.getContext('2d');
                canvas.width = img.naturalWidth;
                canvas.height = img.naturalHeight;
                ctx.drawImage(img, 0, 0);
                return canvas.toDataURL('image/png');
            } else {
                return null;
            }
        })();
        """
        
        self.web_view.page().runJavaScript(js_code, self.save_image)

    def save_image(self, data_url):
        if not data_url:
            QMessageBox.warning(self, "Aviso", "Imagem não encontrada! Gere uma imagem primeiro.")
            return

        try:
            # Remover o prefixo 'data:image/png;base64,' para obter os dados brutos
            image_data = base64.b64decode(data_url.split(',')[1])
            
            # Criar pasta de imagens se não existir
            if not os.path.exists("imagens"):
                os.makedirs("imagens")

            # Gerar nome do arquivo com timestamp
            from datetime import datetime
            filename = f"imagens/imagem_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png"
            
            # Salvar a imagem
            with open(filename, 'wb') as f:
                f.write(image_data)
            
            QMessageBox.information(self, "Sucesso", f"Imagem salva em {filename}")
            
            # Atualizar contagem de mídias
            data = load_data()
            data["midias"] += 1
            save_data(data)
            
        except Exception as e:
            QMessageBox.critical(self, "Erro", f"Erro ao salvar imagem: {str(e)}")

class LicenseManager:
    def __init__(self):
        self.license_file = "config/license.key"
        self.api_url = "https://sua-api.com/licenses"  # Você precisará criar esta API
        self.app_secret = "seu_secret_key"  # Chave secreta para validação
        
    def generate_license_key(self, order_id):
        """Gera uma chave única baseada no ID do pedido"""
        timestamp = datetime.now().strftime('%Y%m%d%H%M')
        unique_id = str(uuid.uuid4())[:8]
        key_base = f"{order_id}-{timestamp}-{unique_id}"
        return hashlib.sha256(key_base.encode()).hexdigest()[:16].upper()

    def verify_license_online(self, key):
        """Verifica a licença com o servidor"""
        try:
            response = requests.post(f"{self.api_url}/verify", json={
                "license_key": key,
                "app_secret": self.app_secret
            })
            
            if response.status_code == 200:
                data = response.json()
                return data["valid"], data.get("license_data")
            return False, None
        except:
            # Fallback para verificação offline se o servidor estiver indisponível
            return self.verify_license_offline(key)

    def verify_license_offline(self, key):
        """Verificação offline (backup)"""
        try:
            with open(self.license_file, 'r') as f:
                saved_data = json.load(f)
                if saved_data["key"] == key and \
                   datetime.strptime(saved_data["expires"], "%Y-%m-%d") > datetime.now():
                    return True, saved_data
        except:
            pass
        return False, None

    def activate_license(self, key):
        """Ativa uma nova licença"""
        success, license_data = self.verify_license_online(key)
        if success:
            self.save_license_locally(key, license_data)
        return success, license_data

    def save_license_locally(self, key, license_data):
        """Salva a licença localmente"""
        with open(self.license_file, 'w') as f:
            json.dump({
                "key": key,
                "type": license_data["type"],
                "expires": license_data["expires"],
                "features": license_data["features"]
            }, f)

class LicenseDialog(QDialog):
    def __init__(self, license_manager):
        super().__init__()
        self.license_manager = license_manager
        self.setup_ui()
        
    def setup_ui(self):
        self.setWindowTitle("Ativação do DarkTikTok")
        self.setMinimumWidth(400)
        
        layout = QVBoxLayout()
        
        # Logo ou título
        title = QLabel("DarkTikTok")
        title.setStyleSheet("""
            QLabel {
                font-size: 24px;
                font-weight: bold;
                color: #FFD700;
                margin: 20px;
            }
        """)
        layout.addWidget(title, alignment=Qt.AlignmentFlag.AlignCenter)
        
        # Instruções
        instructions = QLabel(
            "Para usar o DarkTikTok, insira sua chave de licença.\n"
            "Se você não tem uma chave, entre em contato pelo email: exemplo@email.com"
        )
        instructions.setWordWrap(True)
        layout.addWidget(instructions)
        
        # Campo de licença
        self.license_input = QLineEdit()
        self.license_input.setPlaceholderText("XXXXX-XXXXX-XXXXX")
        layout.addWidget(self.license_input)
        
        # Botões
        button_layout = QHBoxLayout()
        
        activate_btn = QPushButton("Ativar")
        activate_btn.setStyleSheet("""
            QPushButton {
                background-color: #FFD700;
                color: black;
                padding: 10px 20px;
                border-radius: 5px;
                font-weight: bold;
            }
        """)
        activate_btn.clicked.connect(self.activate_license)
        
        cancel_btn = QPushButton("Cancelar")
        cancel_btn.clicked.connect(self.reject)
        
        button_layout.addWidget(activate_btn)
        button_layout.addWidget(cancel_btn)
        layout.addLayout(button_layout)
        
        # Status
        self.status_label = QLabel("")
        self.status_label.setStyleSheet("color: #FF5252;")
        layout.addWidget(self.status_label)
        
        self.setLayout(layout)
    
    def activate_license(self):
        key = self.license_input.text().strip()
        success, license_data = self.license_manager.activate_license(key)
        
        if success:
            self.status_label.setStyleSheet("color: #4CAF50;")
            self.status_label.setText(f"Licença {license_data['type']} ativada com sucesso!")
            QTimer.singleShot(1500, self.accept)
        else:
            self.status_label.setText("Chave de licença inválida!")

class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        
        # Inicializar gerenciador de licença
        self.license_manager = LicenseManager()
        
        # Verificar licença
        if not self.check_license():
            sys.exit()
        
        self.setWindowTitle("DarkTikTok")
        self.setMinimumSize(1200, 800)
        self.setStyleSheet(STYLE_SHEET)
        
        # Widget central
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # Layout principal
        layout = QVBoxLayout(central_widget)
        
        # Tabs
        self.tabs = QTabWidget()
        layout.addWidget(self.tabs)
        
        # Adicionar abas
        self.add_tabs()
        
        # Aplicar estilo global
        self.apply_styles()

    def apply_styles(self):
        self.setStyleSheet(STYLE_SHEET)

    def add_tabs(self):
        self.tabs.addTab(HomeWindow(), "Home")
        self.tabs.addTab(ScriptGeneratorWindow(), "Gerador de Roteiros")
        self.tabs.addTab(ImageGeneratorWindow(), "Gerador de Imagens")
        self.tabs.addTab(WebViewWindow("https://www.piclumen.com/ai-art-generator/"), "PicLumen")
        self.tabs.addTab(AudioWindow(), "Áudio")
        self.tabs.addTab(LanguageWindow(), "Idiomas")
        self.tabs.addTab(OtherWindow(), "Outras Ferramentas")

    def add_interface_design_tab(self):
        tab = QWidget()
        layout = QVBoxLayout()

        theme_label = QLabel("Tema:")
        theme_combo = QComboBox()
        theme_combo.addItems(["Dark", "Light"])
        layout.addWidget(theme_label)
        layout.addWidget(theme_combo)

        animation_btn = QPushButton("Testar Animação")
        layout.addWidget(animation_btn)

        layout.addStretch()
        tab.setLayout(layout)
        self.tabs.addTab(tab, "Interface & Design")

    def add_script_features_tab(self):
        tab = QWidget()
        layout = QVBoxLayout()

        # Adicionar elementos do script features
        features_group = QGroupBox("Funcionalidades do Roteiro")
        features_layout = QVBoxLayout()

        # Adicionar botões para cada funcionalidade
        features = [
            "Sistema de Versionamento",
            "Histórico de Edições",
            "Exportar Roteiro",
            "Tags e Categorias",
            "Busca Avançada"
        ]

        for feature in features:
            btn = QPushButton(feature)
            features_layout.addWidget(btn)

        features_group.setLayout(features_layout)
        layout.addWidget(features_group)

        tab.setLayout(layout)
        self.tabs.addTab(tab, "Funcionalidades")

    def add_ai_automation_tab(self):
        tab = QWidget()
        layout = QVBoxLayout()

        ai_group = QGroupBox("IA e Automação")
        ai_layout = QVBoxLayout()

        features = [
            "Análise de Sentimento",
            "Sugestões Automáticas",
            "Detecção de Plágio",
            "Correção Gramatical",
            "Tradução Automática"
        ]

        for feature in features:
            btn = QPushButton(feature)
            ai_layout.addWidget(btn)

        ai_group.setLayout(ai_layout)
        layout.addWidget(ai_group)

        tab.setLayout(layout)
        self.tabs.addTab(tab, "IA & Automação")

    def add_collaboration_tab(self):
        tab = QWidget()
        layout = QVBoxLayout()

        collab_group = QGroupBox("Colaboração")
        collab_layout = QVBoxLayout()

        features = [
            "Compartilhar Roteiro",
            "Comentários",
            "Edição Colaborativa",
            "Sistema de Revisão",
            "Exportar para Redes"
        ]

        for feature in features:
            btn = QPushButton(feature)
            collab_layout.addWidget(btn)

        collab_group.setLayout(collab_layout)
        layout.addWidget(collab_group)

        tab.setLayout(layout)
        self.tabs.addTab(tab, "Colaboração")

    def add_analytics_tab(self):
        tab = QWidget()
        layout = QVBoxLayout()

        analytics_group = QGroupBox("Analytics")
        analytics_layout = QVBoxLayout()

        features = [
            "Métricas de Engajamento",
            "Análise de Performance",
            "Relatórios",
            "Insights",
            "Tracking"
        ]

        for feature in features:
            btn = QPushButton(feature)
            analytics_layout.addWidget(btn)

        analytics_group.setLayout(analytics_layout)
        layout.addWidget(analytics_group)

        tab.setLayout(layout)
        self.tabs.addTab(tab, "Analytics")

    def add_integration_tab(self):
        tab = QWidget()
        layout = QVBoxLayout()

        integration_group = QGroupBox("Integrações")
        integration_layout = QVBoxLayout()

        features = [
            "APIs Sociais",
            "Ferramentas de Edição",
            "Cloud Sync",
            "Backup Automático",
            "Calendário"
        ]

        for feature in features:
            btn = QPushButton(feature)
            integration_layout.addWidget(btn)

        integration_group.setLayout(integration_layout)
        layout.addWidget(integration_group)

        tab.setLayout(layout)
        self.tabs.addTab(tab, "Integrações")

    def add_advanced_features_tab(self):
        tab = QWidget()
        layout = QVBoxLayout()

        advanced_group = QGroupBox("Recursos Avançados")
        advanced_layout = QVBoxLayout()

        features = [
            "Prompts Personalizados",
            "Biblioteca de Hooks",
            "Gerador de Thumbnails",
            "Sugestão de Músicas",
            "Timeline"
        ]

        for feature in features:
            btn = QPushButton(feature)
            advanced_layout.addWidget(btn)

        advanced_group.setLayout(advanced_layout)
        layout.addWidget(advanced_group)

        tab.setLayout(layout)
        self.tabs.addTab(tab, "Recursos Avançados")

    def add_accessibility_tab(self):
        tab = QWidget()
        layout = QVBoxLayout()

        accessibility_group = QGroupBox("Acessibilidade")
        accessibility_layout = QVBoxLayout()

        features = [
            "Múltiplos Idiomas",
            "Alto Contraste",
            "Atalhos de Teclado",
            "Leitor de Tela",
            "Ajuste de Fonte"
        ]

        for feature in features:
            btn = QPushButton(feature)
            accessibility_layout.addWidget(btn)

        accessibility_group.setLayout(accessibility_layout)
        layout.addWidget(accessibility_group)

        tab.setLayout(layout)
        self.tabs.addTab(tab, "Acessibilidade")

    def add_security_tab(self):
        tab = QWidget()
        layout = QVBoxLayout()

        security_group = QGroupBox("Segurança")
        security_layout = QVBoxLayout()

        features = [
            "Criptografia",
            "Backup",
            "Permissões",
            "2FA",
            "Logs"
        ]

        for feature in features:
            btn = QPushButton(feature)
            security_layout.addWidget(btn)

        security_group.setLayout(security_layout)
        layout.addWidget(security_group)

        tab.setLayout(layout)
        self.tabs.addTab(tab, "Segurança")

    def add_monetization_tab(self):
        tab = QWidget()
        layout = QVBoxLayout()

        monetization_group = QGroupBox("Monetização")
        monetization_layout = QVBoxLayout()

        features = [
            "Assinaturas",
            "Recursos Premium",
            "Marketplace",
            "Consultoria",
            "Análise Pro"
        ]

        for feature in features:
            btn = QPushButton(feature)
            monetization_layout.addWidget(btn)

        monetization_group.setLayout(monetization_layout)
        layout.addWidget(monetization_group)

        tab.setLayout(layout)
        self.tabs.addTab(tab, "Monetização")

    def check_license(self):
        # Verificar se já existe uma licença salva
        saved_key = self.license_manager.load_license()
        if saved_key:
            success, _ = self.license_manager.verify_license(saved_key)
            if success:
                return True
        
        # Se não existe ou é inválida, mostrar diálogo
        dialog = LicenseDialog(self.license_manager)
        if dialog.exec() == QDialog.DialogCode.Accepted:
            return True
        return False

class HomeWindow(QWidget):
    def __init__(self):
        super().__init__()
        self.setStyleSheet("background-color: #1E1E2E; color: white;")
        
        layout = QVBoxLayout()
        
        # Carregar dados
        data = load_data()
        
        # Título de boas-vindas
        welcome_label = QLabel("Bem-vindo ao Script Generator AI")
        layout.addWidget(welcome_label, alignment=Qt.AlignmentFlag.AlignCenter)
        
        # Cards de estatísticas/resumo
        stats_layout = QHBoxLayout()
        stats = [
            ("Roteiros Gerados", str(data["roteiros"])),
            ("Mídias Criadas", str(data["midias"])),
            ("Áudios Processados", str(data["audios"]))
        ]
        
        for title, value in stats:
            card = QWidget()
            card.setStyleSheet("""
                QWidget {
                    background-color: #2D2D3F;
                    border-radius: 10px;
                    padding: 20px;
                }
            """)
            card_layout = QVBoxLayout()
            
            value_label = QLabel(value)
            value_label.setStyleSheet("font-size: 26px; font-weight: bold; color: #FFD700;")
            title_label = QLabel(title)
            title_label.setStyleSheet("font-size: 18px;")
            
            card_layout.addWidget(value_label)
            card_layout.addWidget(title_label)
            card.setLayout(card_layout)
            stats_layout.addWidget(card)
        
        layout.addLayout(stats_layout)
        layout.addStretch()
        self.setLayout(layout)

class AudioWindow(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Áudio")
        self.setMinimumSize(800, 600)
        self.setStyleSheet("background-color: #1E1E2E; color: white;")
        
        layout = QVBoxLayout()
        
        title_label = QLabel("Processamento de Áudio")
        title_label.setStyleSheet("""
            QLabel {
                color: #FFD700;
                font-size: 24px;
                font-weight: bold;
                margin: 20px 0;
            }
        """)
        layout.addWidget(title_label)
        
        # Cards de ferramentas de áudio
        grid_layout = QGridLayout()
        
        tools = [
            ("Converter Texto em Áudio", "Transforme seus roteiros em narrações"),
            ("Editar Áudio", "Ferramentas básicas de edição"),
            ("Remover Ruído", "Limpe seus arquivos de áudio"),
            ("Mixagem", "Combine múltiplas faixas")
        ]
        
        for i, (tool_name, description) in enumerate(tools):
            card = QWidget()
            card.setStyleSheet("""
                QWidget {
                    background-color: #2D2D3F;
                    border-radius: 10px;
                    padding: 15px;
                }
            """)
            
            card_layout = QVBoxLayout()
            title = QLabel(tool_name)
            title.setStyleSheet("font-size: 18px; font-weight: bold; color: #FFD700;")
            desc = QLabel(description)
            desc.setWordWrap(True)
            
            btn = QPushButton("Abrir")
            btn.setStyleSheet("""
                QPushButton {
                    background-color: #FFD700;
                    color: black;
                    padding: 10px;
                    border-radius: 5px;
                    font-weight: bold;
                }
            """)
            
            card_layout.addWidget(title)
            card_layout.addWidget(desc)
            card_layout.addWidget(btn)
            card.setLayout(card_layout)
            
            grid_layout.addWidget(card, i // 2, i % 2)
        
        layout.addLayout(grid_layout)
        layout.addStretch()
        self.setLayout(layout)

class LanguageWindow(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Idiomas")
        self.setMinimumSize(800, 600)
        self.setStyleSheet("background-color: #1E1E2E; color: white;")
        
        layout = QVBoxLayout()
        
        title_label = QLabel("Traduções e Idiomas")
        title_label.setStyleSheet("""
            QLabel {
                color: #FFD700;
                font-size: 24px;
                font-weight: bold;
                margin: 20px 0;
            }
        """)
        layout.addWidget(title_label)
        
        # Ferramentas de idiomas
        tools = [
            ("Tradução Automática", "Traduza seus roteiros para múltiplos idiomas"),
            ("Revisão de Texto", "Correção gramatical e ortográfica"),
            ("Adaptação Cultural", "Adapte seu conteúdo para diferentes culturas"),
            ("Legendas", "Gere legendas automáticas")
        ]
        
        for tool_name, description in tools:
            tool_card = QWidget()
            tool_card.setStyleSheet("""
                QWidget {
                    background-color: #2D2D3F;
                    border-radius: 10px;
                    padding: 15px;
                    margin: 5px;
                }
            """)
            
            card_layout = QVBoxLayout()
            
            title = QLabel(tool_name)
            title.setStyleSheet("font-size: 18px; font-weight: bold; color: #FFD700;")
            desc = QLabel(description)
            desc.setWordWrap(True)
            
            btn = QPushButton("Usar Ferramenta")
            btn.setStyleSheet("""
                QPushButton {
                    background-color: #FFD700;
                    color: black;
                    padding: 10px;
                    border-radius: 5px;
                    font-weight: bold;
                }
            """)
            
            card_layout.addWidget(title)
            card_layout.addWidget(desc)
            card_layout.addWidget(btn)
            tool_card.setLayout(card_layout)
            
            layout.addWidget(tool_card)
        
        layout.addStretch()
        self.setLayout(layout)

class OtherWindow(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Outras Ferramentas")
        self.setMinimumSize(800, 600)
        self.setStyleSheet("background-color: #1E1E2E; color: white;")
        
        layout = QVBoxLayout()
        
        title_label = QLabel("Ferramentas Adicionais")
        title_label.setStyleSheet("""
            QLabel {
                color: #FFD700;
                font-size: 24px;
                font-weight: bold;
                margin: 20px 0;
            }
        """)
        layout.addWidget(title_label)
        
        # Grid de ferramentas extras
        grid_layout = QGridLayout()
        
        tools = [
            ("Analytics", "Análise de desempenho dos seus conteúdos"),
            ("SEO", "Otimização para mecanismos de busca"),
            ("Hashtags", "Gerador de hashtags relevantes"),
            ("Calendário", "Planejamento de conteúdo"),
            ("Templates", "Modelos prontos para usar"),
            ("Backup", "Backup dos seus projetos")
        ]
        
        for i, (tool_name, description) in enumerate(tools):
            card = QWidget()
            card.setStyleSheet("""
                QWidget {
                    background-color: #2D2D3F;
                    border-radius: 10px;
                    padding: 15px;
                }
            """)
            
            card_layout = QVBoxLayout()
            title = QLabel(tool_name)
            title.setStyleSheet("font-size: 18px; font-weight: bold; color: #FFD700;")
            desc = QLabel(description)
            desc.setWordWrap(True)
            
            btn = QPushButton("Abrir")
            btn.setStyleSheet("""
                QPushButton {
                    background-color: #FFD700;
                    color: black;
                    padding: 10px;
                    border-radius: 5px;
                    font-weight: bold;
                }
            """)
            
            card_layout.addWidget(title)
            card_layout.addWidget(desc)
            card_layout.addWidget(btn)
            card.setLayout(card_layout)
            
            grid_layout.addWidget(card, i // 2, i % 2)
        
        layout.addLayout(grid_layout)
        layout.addStretch()
        self.setLayout(layout)

class ScriptGeneratorWindow(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Gerador de Roteiros")
        self.setMinimumSize(600, 400)
        self.setStyleSheet("background-color: #1E1E2E; color: white;")
        
        layout = QVBoxLayout()
        
        # Loading label
        self.loading_label = QLabel("Gerando roteiro...")
        self.loading_label.setStyleSheet("color: #FFD700; font-weight: bold;")
        self.loading_label.hide()
        layout.addWidget(self.loading_label)
        
        # Seleção de IA
        ai_label = QLabel("Selecione a IA:")
        self.ai_combo = QComboBox()
        self.ai_combo.addItems(["Gemini", "Claude (em breve)", "ChatGPT (em breve)"])
        
        # Tema/Título
        theme_label = QLabel("Tema/Título:")
        self.theme_input = QLineEdit()
        
        # Nicho
        niche_label = QLabel("Nicho:")
        self.niche_combo = QComboBox()
        self.niche_combo.addItems([
            "DESENVOLVIMENTO PESSOAL",
            "ESPIRITUALIDADE",
            "ESTOICISMO",
            "FINANÇAS E INVESTIMENTOS",
            "FINANÇAS E MENTALIDADE FINANCEIRA",
            "FILOSOFIA",
            "LEI DA ATRAÇÃO",
            "MARKETING DIGITAL",
            "EDIÇÃO DE IMAGENS",
            "ORAÇÃO (DIRETO)",
            "STORYTELLING",
            "DICAS DE PRODUTIVIDADE",
            "RECEITAS RÁPIDAS",
            "LIFE HACKS",
            "MODA E ESTILO",
            "SKINCARE E BELEZA",
            "DECORAÇÃO",
            "DIY (FAÇA VOCÊ MESMO)",
            "HUMOR E MEMES",
            "ASTROLOGIA",
            "MISTÉRIOS E TEORIAS",
            "DICAS DE ESTUDO",
            "TECNOLOGIA",
            "GAMES",
            "PETS",
            "RELACIONAMENTOS",
            "PSICOLOGIA",
            "VENDAS",
            "DROPSHIPPING",
            "ACADEMIA E FITNESS",
            "MÚSICA",
            "DANÇA",
            "TRENDS E DESAFIOS",
            "MINIMALISMO",
            "ORGANIZAÇÃO",
            "VIAGENS",
            "IDIOMAS",
            "PROGRAMAÇÃO",
            "DESIGN",
            "EMPREENDEDORISMO"
        ])
        
        # Idioma
        lang_label = QLabel("Idioma:")
        self.lang_combo = QComboBox()
        self.lang_combo.addItems(["Português", "English", "Español"])
        
        # Caracteres
        chars_label = QLabel("Média de caracteres:")
        self.chars_spin = QSpinBox()
        self.chars_spin.setRange(100, 10000)
        self.chars_spin.setValue(1000)
        
        # Resultado
        self.result_text = QTextEdit()
        self.result_text.setReadOnly(True)
        self.result_text.setStyleSheet("""
            QTextEdit {
                background-color: #2D2D3F;
                color: white;
                border: 1px solid #3D3D4F;
                padding: 10px;
            }
        """)
        
        # Adiciona widgets ao layout
        for widget in [ai_label, self.ai_combo, 
                      theme_label, self.theme_input,
                      niche_label, self.niche_combo, 
                      lang_label, self.lang_combo,
                      chars_label, self.chars_spin,
                      self.result_text]:
            layout.addWidget(widget)
        
        # Botões
        button_layout = QHBoxLayout()
        
        generate_btn = QPushButton("Gerar Roteiro")
        generate_btn.setStyleSheet("""
            QPushButton {
                background-color: #FFD700;
                color: black;
                padding: 15px;
                border-radius: 5px;
                font-weight: bold;
            }
        """)
        generate_btn.clicked.connect(self.generate_script)
        
        save_btn = QPushButton("Salvar Roteiro")
        save_btn.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50;
                color: white;
                padding: 15px;
                border-radius: 5px;
                font-weight: bold;
            }
        """)
        save_btn.clicked.connect(self.save_script)
        
        button_layout.addWidget(generate_btn)
        button_layout.addWidget(save_btn)
        layout.addLayout(button_layout)
        
        self.setLayout(layout)

    def generate_script(self):
        self.loading_label.show()
        self.result_text.clear()
        QApplication.processEvents()

        try:
            GOOGLE_API_KEY = "AIzaSyCFJJLLB8m6gT_4VuGsVeC1frinfJ0Nh28"
            genai.configure(api_key=GOOGLE_API_KEY)
            model = genai.GenerativeModel('gemini-pro')

            theme = self.theme_input.text()
            niche = self.niche_combo.currentText()
            language = self.lang_combo.currentText()
            char_count = self.chars_spin.value()

            prompt = f"""
            Você é um especialista em conteúdo viral para TikTok/Reels/Shorts.
            
            ⚠️ REQUISITO CRÍTICO:
            O roteiro DEVE ter EXATAMENTE {char_count} caracteres. Não gere menos que isso.
            Para atingir esse tamanho, crie múltiplas seções de conteúdo, histórias e exemplos.
            
            ✨ BRIEFING DO CONTEÚDO:
            Tema: {theme}
            Nicho: {niche}
            Idioma: {language}
            
            🎯 ESTRUTURA EXPANDIDA (para atingir {char_count} caracteres):
            
            1. INTRODUÇÃO PODEROSA (20% do conteúdo)
            - Hook explosivo inicial
            - 3-4 frases de retenção
            - Promessa principal
            - Setup do problema/solução
            
            2. DESENVOLVIMENTO PRINCIPAL (50% do conteúdo)
            - Mínimo 5 pontos principais
            - História envolvente para cada ponto
            - Exemplos práticos detalhados
            - Revelações progressivas
            - Loops abertos frequentes
            
            3. CLÍMAX E REVELAÇÕES (20% do conteúdo)
            - Grandes revelações
            - Transformações principais
            - Provas e resultados
            - Momentos "aha"
            
            4. CALL-TO-ACTION EXPANDIDO (10% do conteúdo)
            - Múltiplos CTAs estratégicos
            - Benefícios de cada ação
            - Senso de urgência
            - Fechamento impactante
            
            🔄 ELEMENTOS DE RETENÇÃO (distribuir ao longo do texto):
            - "Não pule, isso é importante..."
            - "O que vou revelar agora..."
            - "Preste muita atenção no próximo ponto..."
            - "Guarde esse vídeo para consultar depois..."
            - "Você foi escolhido para receber essa mensagem..."
            - "O próximo segredo vai te surpreender..."
            - "Isso que vou te contar agora muda tudo..."
            
            ⚡ GATILHOS DE ENGAJAMENTO (distribuir uniformemente):
            - Curiosidade crescente
            - Urgência natural
            - Exclusividade do conteúdo
            - Senso de pertencimento
            - Transformação garantida
            - Prova social
            - Autoridade no assunto
            
            ⚠️ REGRAS CRUCIAIS:
            1. ATINGIR EXATAMENTE {char_count} caracteres
            2. Manter engajamento do início ao fim
            3. Sem direções de cena ou formatações
            4. Texto 100% pronto para narração
            5. Linguagem hipnótica e persuasiva
            6. Gatilhos de viralização frequentes
            
            Gere agora um roteiro COMPLETO com EXATAMENTE {char_count} caracteres, 
            mantendo alto engajamento e potencial de viralização do início ao fim.
            O texto deve criar desejo irresistível de curtir, comentar e compartilhar.
            
            IMPORTANTE: Verifique se o texto gerado tem EXATAMENTE {char_count} caracteres 
            antes de finalizar. Ajuste o conteúdo se necessário para atingir esse número preciso.
            """

            response = model.generate_content(prompt)
            texto_gerado = response.text
            
            # Verificar tamanho e informar usuário
            tamanho_atual = len(texto_gerado)
            if tamanho_atual < char_count:
                self.result_text.setText(f"[AVISO: Roteiro gerado com {tamanho_atual} caracteres, menor que o solicitado ({char_count})]\n\n{texto_gerado}")
            else:
                self.result_text.setText(texto_gerado)
            
            # Atualizar contagem de roteiros
            data = load_data()
            data["roteiros"] += 1
            save_data(data)
            
        except Exception as e:
            QMessageBox.critical(self, "Erro", f"Erro ao gerar roteiro: {str(e)}")
        finally:
            self.loading_label.hide()

    def save_script(self):
        if not self.result_text.toPlainText():
            QMessageBox.warning(self, "Aviso", "Gere um roteiro primeiro!")
            return

        try:
            if not os.path.exists("roteiros"):
                os.makedirs("roteiros")

            from datetime import datetime
            filename = f"roteiros/roteiro_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
            
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(self.result_text.toPlainText())
            QMessageBox.information(self, "Sucesso", f"Roteiro salvo em {filename}")
        except Exception as e:
            QMessageBox.critical(self, "Erro", f"Erro ao salvar arquivo: {str(e)}")

class ImageDisplayWindow(QWidget):
    def __init__(self, image):
        super().__init__()
        self.setWindowTitle("Imagem Gerada")
        self.setMinimumSize(800, 600)
        self.setStyleSheet("background-color: #1E1E2E; color: white;")
        
        layout = QVBoxLayout()
        
        # Exibir a imagem
        self.image_label = QLabel()
        self.image_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.image_label.setStyleSheet("""
            QLabel {
                background-color: #2D2D3F;
                border-radius: 10px;
                margin: 10px;
            }
        """)
        
        buffer = BytesIO()
        image.save(buffer, format="PNG")
        image_data = buffer.getvalue()
        
        pixmap = QPixmap()
        pixmap.loadFromData(image_data)
        
        scaled_pixmap = pixmap.scaled(
            800, 600,
            Qt.AspectRatioMode.KeepAspectRatio,
            Qt.TransformationMode.SmoothTransformation
        )
        
        self.image_label.setPixmap(scaled_pixmap)
        layout.addWidget(self.image_label)
        
        self.setLayout(layout)

class ImageGeneratorWindow(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Gerador de Imagens")
        self.setMinimumSize(800, 600)
        self.setStyleSheet("background-color: #1E1E2E; color: white;")
        
        main_layout = QVBoxLayout()
        
        # Título
        title = QLabel("Gerador de Imagens AI")
        title.setStyleSheet("""
            QLabel {
                color: #FFD700;
                font-size: 28px;
                font-weight: bold;
                margin: 20px 0;
            }
        """)
        main_layout.addWidget(title, alignment=Qt.AlignmentFlag.AlignCenter)
        
        # Área de entrada
        input_layout = QVBoxLayout()
        
        prompt_label = QLabel("Descreva a imagem que você quer criar:")
        prompt_label.setStyleSheet("font-size: 16px;")
        input_layout.addWidget(prompt_label)
        
        self.prompt_input = QTextEdit()
        self.prompt_input.setStyleSheet("""
            QTextEdit {
                background-color: #2D2D3F;
                color: white;
                border: 1px solid #3D3D4F;
                border-radius: 5px;
                padding: 10px;
            }
        """)
        self.prompt_input.setMaximumHeight(80)
        input_layout.addWidget(self.prompt_input)
        
        # Controles de estilo
        style_layout = QHBoxLayout()
        
        style_label = QLabel("Estilo:")
        style_label.setStyleSheet("font-size: 16px;")
        self.style_combo = QComboBox()
        self.style_combo.addItems([
            "Realista", "Artístico", "Anime", "3D", "Digital Art",
            "Oil Painting", "Watercolor", "Sketch", "Cartoon"
        ])
        self.style_combo.setStyleSheet("""
            QComboBox {
                background-color: #2D2D3F;
                color: white;
                border: 1px solid #3D3D4F;
                border-radius: 5px;
                padding: 5px;
            }
        """)
        
        style_layout.addWidget(style_label)
        style_layout.addWidget(self.style_combo)
        input_layout.addLayout(style_layout)
        
        # Seleção de IA
        ai_layout = QHBoxLayout()
        
        ai_label = QLabel("Escolha a IA:")
        ai_label.setStyleSheet("font-size: 16px;")
        self.ai_combo = QComboBox()
        self.ai_combo.addItems([
            "Stable Diffusion"
        ])
        self.ai_combo.setStyleSheet("""
            QComboBox {
                background-color: #2D2D3F;
                color: white;
                border: 1px solid #3D3D4F;
                border-radius: 5px;
                padding: 5px;
            }
        """)
        
        ai_layout.addWidget(ai_label)
        ai_layout.addWidget(self.ai_combo)
        input_layout.addLayout(ai_layout)
        
        main_layout.addLayout(input_layout)
        
        # Botões de ação
        action_layout = QHBoxLayout()
        
        generate_btn = QPushButton("Gerar Imagem")
        generate_btn.setStyleSheet("""
            QPushButton {
                background-color: #FFD700;
                color: black;
                padding: 10px;
                border-radius: 5px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #FFC107;
            }
        """)
        generate_btn.clicked.connect(self.generate_image)
        action_layout.addWidget(generate_btn)
        
        save_btn = QPushButton("Salvar Imagem")
        save_btn.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50;
                color: white;
                padding: 10px;
                border-radius: 5px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #45A049;
            }
        """)
        save_btn.clicked.connect(self.save_image)
        action_layout.addWidget(save_btn)
        
        main_layout.addLayout(action_layout)
        
        # Histórico de imagens
        history_label = QLabel("Histórico de Imagens")
        history_label.setStyleSheet("font-size: 16px; margin-top: 20px;")
        main_layout.addWidget(history_label)
        
        self.history_list = QListWidget()
        self.history_list.setStyleSheet("""
            QListWidget {
                background-color: #2D2D3F;
                color: white;
                border: 1px solid #3D3D4F;
                border-radius: 5px;
            }
        """)
        main_layout.addWidget(self.history_list)
        
        # Log viewer
        log_label = QLabel("Log de Atividades")
        log_label.setStyleSheet("font-size: 16px; margin-top: 20px;")
        main_layout.addWidget(log_label)
        
        self.log_text = QTextEdit()
        self.log_text.setReadOnly(True)
        self.log_text.setMaximumHeight(100)
        self.log_text.setStyleSheet("""
            QTextEdit {
                background-color: #2D2D3F;
                color: #90EE90;
                font-family: monospace;
            }
        """)
        main_layout.addWidget(self.log_text)
        
        self.setLayout(main_layout)
        self.current_image = None

    def log(self, message):
        """Adiciona mensagem ao log com timestamp"""
        from datetime import datetime
        timestamp = datetime.now().strftime("%H:%M:%S")
        self.log_text.append(f"[{timestamp}] {message}")
        print(f"[{timestamp}] {message}")  # Também imprime no console
        QApplication.processEvents()

    def generate_image(self):
        self.generate_image_with_stable_diffusion()

    def generate_image_with_stable_diffusion(self):
        try:
            prompt = self.prompt_input.toPlainText()
            style = self.style_combo.currentText()
            
            if not prompt:
                QMessageBox.warning(self, "Aviso", "Por favor, insira um prompt.")
                return
            
            # Traduzir o prompt para inglês
            translated_prompt = GoogleTranslator(source='auto', target='en').translate(prompt)
            
            # Descrição detalhada do estilo
            style_descriptions = {
                "Realista": "in a realistic style, highly detailed, lifelike",
                "Artístico": "in an artistic style, expressive, creative",
                "Anime": "in anime style, vibrant colors, sharp lines",
                "3D": "in 3D style, depth, realistic lighting",
                "Digital Art": "as digital art, modern, sleek",
                "Oil Painting": "as an oil painting, textured, classic",
                "Watercolor": "in watercolor style, soft, fluid",
                "Sketch": "as a sketch, monochrome, rough lines",
                "Cartoon": "in cartoon style, exaggerated features, playful"
            }
            
            detailed_style = style_descriptions.get(style, "")
            
            self.log("Iniciando geração com Stable Diffusion...")
            
            # API do Stable Diffusion
            API_URL = "https://api.stability.ai/v1/generation/stable-diffusion-xl-1024-v1-0/text-to-image"
            
            headers = {
                "Accept": "application/json",
                "Authorization": "Bearer sk-5BTcIdHhhduxf99F5WJp418Z7UvujFXMX5RJLp33kriBlrsm"  # Substitua por sua chave de API real
            }

            data = {
                "text_prompts": [{"text": f"{translated_prompt}, {detailed_style}"}],
                "cfg_scale": 7,
                "height": 1024,
                "width": 1024,
                "samples": 1,
                "steps": 30,
            }
            
            self.log("Enviando requisição...")
            response = requests.post(API_URL, headers=headers, json=data)
            
            if response.status_code == 200:
                self.log("Imagem gerada com sucesso!")
                # Processar resposta e exibir imagem
                image_data = response.json()["artifacts"][0]["base64"]
                image = Image.open(BytesIO(base64.b64decode(image_data)))
                self.display_image(image)
                self.add_to_history(image)
            else:
                self.log(f"Erro na API: {response.status_code} - {response.text}")
                self.generate_demo_image()
            
        except Exception as e:
            self.log(f"Erro: {str(e)}")

    def add_to_history(self, image):
        """Adiciona a imagem ao histórico"""
        from datetime import datetime
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        self.history_list.addItem(f"Imagem gerada em {timestamp}")
        self.current_image = image

    def display_image(self, image):
        """Exibe a imagem em uma nova janela"""
        self.image_window = ImageDisplayWindow(image)
        self.image_window.show()

    def save_image(self):
        if not self.current_image:
            QMessageBox.warning(self, "Aviso", "Gere uma imagem primeiro!")
            return

        try:
            if not os.path.exists("imagens"):
                os.makedirs("imagens")

            from datetime import datetime
            filename = f"imagens/imagem_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png"
            
            self.current_image.save(filename)
            QMessageBox.information(self, "Sucesso", f"Imagem salva em {filename}")
        except Exception as e:
            QMessageBox.critical(self, "Erro", f"Erro ao salvar imagem: {str(e)}")

    def generate_demo_image(self):
        """Gera uma imagem de demonstração mais elaborada"""
        self.log("Gerando imagem de demonstração...")
        
        width = height = 512
        image = Image.new('RGB', (width, height))
        
        for y in range(height):
            for x in range(width):
                r = int(abs(math.sin(x/30)) * 255)
                g = int(abs(math.cos(y/30)) * 255)
                b = int(abs(math.sin((x+y)/60)) * 255)
                image.putpixel((x, y), (r, g, b))
        
        self.display_image(image)
        self.log("Imagem de demonstração gerada!")

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec())